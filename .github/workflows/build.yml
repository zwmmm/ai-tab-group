name: "Submit to Web Store"
on:
  push:
    tags:
      - v*

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache pnpm modules
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true
      - name: Use Node.js 20.x
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 20.x
          cache: "pnpm"
      - name: Build the extension
        run: pnpm build
        env:
          PARCEL_WORKER_BACKEND: process

      # 打包扩展文件
      - name: Package extension
        run: |
          cd build/chrome-mv3-prod
          zip -r ../../ai-tab-group.zip *

      # 提取版本号
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      # 获取commit信息
      - name: Get commit message
        id: get_commit_message
        run: |
          # 获取与标签关联的提交信息
          COMMIT_MSG=$(git log -1 --pretty=format:%s ${GITHUB_REF#refs/tags/})
          # 将提交信息转换为GitHub Actions可用的格式（处理多行）
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # 获取当前标签名
          CURRENT_TAG=${GITHUB_REF#refs/tags/}

          # 查找上一个标签
          PREV_TAG=$(git describe --tags --abbrev=0 $CURRENT_TAG^ 2>/dev/null || echo "")

          # 如果找到了上一个标签，则获取从上一个标签到当前标签之间的所有提交
          if [ -n "$PREV_TAG" ]; then
            echo "找到上一个标签: $PREV_TAG，获取 $PREV_TAG..$CURRENT_TAG 之间的提交"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..$CURRENT_TAG --no-merges)
          else
            # 如果没有找到上一个标签，则获取所有提交
            echo "没有找到上一个标签，获取所有提交"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $CURRENT_TAG --no-merges)
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 创建 GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: AI Tab Group ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: |
            AI Tab Group 浏览器扩展 ${{ steps.get_version.outputs.VERSION }} 版本发布

            ### 发布说明
            ${{ steps.get_commit_message.outputs.message }}

            ### 最近更新
            ${{ steps.get_commit_message.outputs.changelog }}

      # 上传扩展文件到 Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ai-tab-group.zip
          asset_name: ai-tab-group-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip
